/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace FranchiseRegistry {
  export type FranchiseCreationParamsStruct = {
    name: string;
    symbol: string;
    description: string;
    tokenURI: string;
  };

  export type FranchiseCreationParamsStructOutput = [string, string, string, string] & {
    name: string;
    symbol: string;
    description: string;
    tokenURI: string;
  };
}

export interface FranchiseRegistryInterface extends utils.Interface {
  functions: {
    "registerFranchise((string,string,string,string))": FunctionFragment;
    "ipAssetRegistryForId(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "registerFranchise" | "ipAssetRegistryForId",
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "registerFranchise",
    values: [FranchiseRegistry.FranchiseCreationParamsStruct],
  ): string;
  encodeFunctionData(functionFragment: "ipAssetRegistryForId", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "registerFranchise", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ipAssetRegistryForId", data: BytesLike): Result;

  events: {};
}

export interface FranchiseRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FranchiseRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    registerFranchise(
      params: FranchiseRegistry.FranchiseCreationParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    ipAssetRegistryForId(franchiseId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  registerFranchise(
    params: FranchiseRegistry.FranchiseCreationParamsStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  ipAssetRegistryForId(franchiseId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    registerFranchise(
      params: FranchiseRegistry.FranchiseCreationParamsStruct,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, string]>;

    ipAssetRegistryForId(franchiseId: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    registerFranchise(
      params: FranchiseRegistry.FranchiseCreationParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    ipAssetRegistryForId(franchiseId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    registerFranchise(
      params: FranchiseRegistry.FranchiseCreationParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    ipAssetRegistryForId(
      franchiseId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
