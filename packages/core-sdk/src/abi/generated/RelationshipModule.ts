/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IRelationshipModule {
  export type RelationshipParamsStruct = {
    sourceContract: string;
    sourceId: BigNumberish;
    destContract: string;
    destId: BigNumberish;
    relationshipId: BytesLike;
    ttl: BigNumberish;
  };

  export type RelationshipParamsStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber
  ] & {
    sourceContract: string;
    sourceId: BigNumber;
    destContract: string;
    destId: BigNumber;
    relationshipId: string;
    ttl: BigNumber;
  };
}

export interface RelationshipModuleInterface extends utils.Interface {
  functions: {
    "relate((address,uint256,address,uint256,bytes32,uint256),bytes)": FunctionFragment;
    "unrelate((address,uint256,address,uint256,bytes32,uint256))": FunctionFragment;
    "isRelationshipExpired((address,uint256,address,uint256,bytes32,uint256))": FunctionFragment;
    "areTheyRelated((address,uint256,address,uint256,bytes32,uint256))": FunctionFragment;
    "getRelationshipId(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "relate"
      | "unrelate"
      | "isRelationshipExpired"
      | "areTheyRelated"
      | "getRelationshipId"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "relate",
    values: [IRelationshipModule.RelationshipParamsStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unrelate",
    values: [IRelationshipModule.RelationshipParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isRelationshipExpired",
    values: [IRelationshipModule.RelationshipParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "areTheyRelated",
    values: [IRelationshipModule.RelationshipParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getRelationshipId",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "relate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unrelate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRelationshipExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "areTheyRelated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRelationshipId",
    data: BytesLike
  ): Result;

  events: {};
}

export interface RelationshipModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RelationshipModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    relate(
      params: IRelationshipModule.RelationshipParamsStruct,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unrelate(
      params: IRelationshipModule.RelationshipParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isRelationshipExpired(
      params: IRelationshipModule.RelationshipParamsStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    areTheyRelated(
      params: IRelationshipModule.RelationshipParamsStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getRelationshipId(
      name: string,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  relate(
    params: IRelationshipModule.RelationshipParamsStruct,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unrelate(
    params: IRelationshipModule.RelationshipParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isRelationshipExpired(
    params: IRelationshipModule.RelationshipParamsStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  areTheyRelated(
    params: IRelationshipModule.RelationshipParamsStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getRelationshipId(name: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    relate(
      params: IRelationshipModule.RelationshipParamsStruct,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    unrelate(
      params: IRelationshipModule.RelationshipParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    isRelationshipExpired(
      params: IRelationshipModule.RelationshipParamsStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    areTheyRelated(
      params: IRelationshipModule.RelationshipParamsStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRelationshipId(name: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    relate(
      params: IRelationshipModule.RelationshipParamsStruct,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unrelate(
      params: IRelationshipModule.RelationshipParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isRelationshipExpired(
      params: IRelationshipModule.RelationshipParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    areTheyRelated(
      params: IRelationshipModule.RelationshipParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRelationshipId(
      name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    relate(
      params: IRelationshipModule.RelationshipParamsStruct,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unrelate(
      params: IRelationshipModule.RelationshipParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isRelationshipExpired(
      params: IRelationshipModule.RelationshipParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    areTheyRelated(
      params: IRelationshipModule.RelationshipParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRelationshipId(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
